var fs = require('fs');
var Maker = function() {};

/* Loader */
Maker.prototype.loadOrms = function loadOrms(orms) {
    this.checkModelAbbs(orms);

    var self = this;
    this.classes = {};

    orms.forEach(function(orm) {
        self.loadOrm(orm);
    });
};

Maker.prototype.loadOrm = function loadOrm(orm) {
    // pk
    this.makePKClass(orm);
    this.makePKStoreClass(orm);
    // model
    this.makeModelClass(orm);
    this.makeModelStoreClass(orm);
    // list
    if (orm.list) {
        this.makeListClass(orm);
        this.makeListStoreClass(orm);
    }
};

Maker.prototype.checkModelAbbs = function checkModelAbbs(orms) {
    var repeats = {};
    var list;
    orms.forEach(function(orm) {
        if (repeats[orm.abb]) throw new I.Exception(10002);
        repeats[orm.abb] = true;

        if (orm.list) {
            list = orm.abb + 'l';
            if (repeats[list]) throw new I.Exception(10002);
            repeats[list] = true;
        }
    });
};

Maker.prototype.getClasses = function getClasses() {
    return this.classes;
};

/* Maker */
Maker.prototype.makePKClass = function makePKClass(orm) {
    var content = '';

    var Class = new Function('pk', content);

    Class.prototype = new I.PK();
    Class.prototype.constructor = Class;

    this.classes[orm.name + 'PKBase'] = Class;
};

Maker.prototype.makePKStoreClass = function makePKStoreClass(orm) {
    var content = '';
    content += "this.key = '" + I.Const.GLOBAL_KEY_PREFIX + orm.abb + "';\n";
    content += "this.model = " + orm.abb + "PK;\n";

    var Class = new Function('pk', content);

    Class.prototype = new I.PK();
    Class.prototype.constructor = Class;

    this.classes[orm.name + 'PKStoreBase'] = Class;
};

Maker.prototype.makeModelClass = function makeModelClass(orm) {
    var abbs = this.makeAbbs(orm.column, orm.abbFilter);
    var arrays = this.makeArrays(orm.column, orm.arrayFilter);

    // class create
    var content = '';
    content += "this.pk = '" + orm.pk + "';\n";
    content += "this.column = " + JSON.stringify(orm.column) + ";\n";
    /* for toAbbArray / fromAbbArray */
    content += "this.abb = " + JSON.stringify(abbs) + ";\n";
    var fulls = {};
    for (var full in abbs) {                                           
        fulls[abbs[full]] = full;                                  
    }                                                                  
    content += "this.full = " + JSON.stringify(fulls) + ";\n";
    /* for toArray / fromArray */
    content += "this.array = " + JSON.stringify(arrays) + ";\n";

    var Class = new Function('args', content);

    // extends
    Class.prototype = new I.Model();
    Class.prototype.constructor = Class;

    // getter & setter
    orm.column.forEach(function(v, i) {
        Object.defineProperty(
            Class.prototype,
            v,
            {
                get: function() { return this.args[i]; },
                set: function(v) { 
                    if (this.args[i] === v) return;
                    this.args[i] = v;
                    this.updateList[i] = 1;
                },
            }
        );
    });

    this.classes[orm.name + 'Base'] = Class;
};

Maker.prototype.makeModelStoreClass = function makeModelStoreClass(orm) {
    // class create
    var content = '';
    content += "this.model = " + orm.name + ";\n";
    content += "this.modelName = '" + orm.name + "';\n";
    content += "this.pk = '" + orm.pk + "';\n";
    content += "this.abb = '" + orm.abb + "';\n";
    content += "this.pkAutoIncrement = " + orm.pkAutoIncrement.toString() + ";\n";
    content += "this.updateFilter = " + JSON.stringify(orm.updateFilter) + ";\n";

    var Class = new Function(content);

    // extends
    Class.prototype = new I.Model();
    Class.prototype.constructor = Class;

    this.classes[orm.name + 'StoreBase'] = Class;
};

Maker.prototype.makeListClass = function makeListClass(orm) {
    // class create
    var content = '';
     content += "this.childModel = " + orm.name + ";\n";
     content += "this.childModelName = '" + orm.name + "';\n";

    var Class = new Function('pk', 'list', content);

    // extends
    Class.prototype = new I.List();
    Class.prototype.constructor = Class;

    this.classes[orm.name + 'ListBase'] = Class;
};

Maker.prototype.makeListModelClass = function makeListModelClass(orm) {
    // class create
    var content = '';
    content += "this.modelName = '" + orm.list + "';\n";
    content += "this.abb = '" + orm.abb + "l';\n";

    content += "this.childModel = " + orm.name + ";\n";
    content += "this.childStore = '" + orm.name + "Store';\n";

    content += "this.list = " + orm.list + ";\n";

    var Class = new Function(content);

    // extends
    Class.prototype = new I.Model();
    Class.prototype.constructor = Class;

    this.classes[orm.list + 'ModelBase'] = Class;
};

/* Abb */
Maker.prototype.makeAbbs = function makeAbbs(columns, filter) {
    var self = this;
    var abbs = {};
    var i = 0;
    columns.forEach(function(column) {
        // filter
        if (filter.indexOf(i) !== -1) {
            ++i;
            return;
        }

        var candidateAbb = self.makeAbb(column);
        while (self.abbExist(candidateAbb, abbs)) {
            candidateAbb = self.renameAbb(candidateAbb);
        }
        abbs[column] = candidateAbb;
        ++i;
    });

    return abbs;
};

Maker.prototype.makeAbb = function makeAbb(full) {
    return (full[0] + full.replace(/[a-z]/g, '')).toLowerCase();
};

Maker.prototype.abbExist = function abbExist(abb, abbs) {
    return I.Util.valueExist(abb, abbs);
};

Maker.prototype.renameAbb = function renameAbb(abb) {
    return /^([a-zA-Z0-9]+?)(\d+)$/.test(abb) ? RegExp.$1 + (parseInt(RegExp.$2) + 1) : abb + 1;
};
/* Array */
Maker.prototype.makeArrays = function makeArrays(columns, filter) {
    var self = this;
    var arrays = {};
    var i = 0;
    columns.forEach(function(column) {
        // filter
        if (filter.indexOf(i) !== -1) {
            ++i;
            return;
        }

        arrays[column] = true;
        ++i;
    });

    return arrays;
};

/* Creator */
Maker.prototype.createFiles = function createFiles(orms, dir) {
    var self = this;

    // check dir exist
    if (!fs.existsSync(dir)) {
        fs.mkdir(dir);
    }

    orms.forEach(function(orm) {
        // pk
        self.createPKFile(orm, dir);
        self.createPKStoreFile(orm, dir);
        // model
        self.createModelFile(orm, dir);
        self.createModelStoreFile(orm, dir);
        // list
        if (orm.list) {
            self.createListFile(orm, dir);
            self.createListModelFile(orm, dir);
        }
    });
};

Maker.prototype.createPKFile = function createPKFile(orm, dir) {
    var pkName = orm.name + 'PK';
    var content = "/* This file is generated by IFramework - Maker.js for user to rewrite PK file */\n";
    content += "var " + pkName + " = function " + pkName + "(pk) {\n";
    content += "    this.init.call(this, pk);\n";
    content += "};\n";
    content += "\n";

    // extends
    content += pkName + ".prototype = new " + pkName + "Base();\n";
    content += pkName + ".prototype.constructor = " + pkName + ";\n";

    // exports
    content += "if (exports) exports." + pkName + " = " + pkName + ";";

    this.writeFile(pkName + '.js', content, dir, false);
};

Maker.prototype.createPKStoreFile = function createPKStoreFile(orm, dir) {
    var pkStoreName = orm.name + 'PKStore';
    var content = "/* This file is generated by IFramework - Maker.js for user to rewrite PKStore file */\n";
    content += "var " + pkStoreName + " = function " + pkStoreName + "() {\n";
    content += "};\n";
    content += "\n";

    // extends
    content += pkStoreName + ".prototype = new " + pkStoreName + "Base();\n";
    content += pkStoreName + ".prototype.constructor = " + pkStoreName + ";\n";

    // exports
    content += "if (exports) exports." + pkStoreName + " = new " + pkStoreName + "();";

    this.writeFile(pkStoreName + '.js', content, dir, false);
};

Maker.prototype.createModelFile = function createModelFile(orm, dir) {
    var content = "/* This file is generated by IFramework - Maker.js for user to rewrite Model file */\n";
    content += "var " + orm.name + " = function " + orm.name + "(args) {\n";
    content += "    this.init.call(this, args);\n";
    content += "};\n";
    content += "\n";

    // extends
    content += orm.name + ".prototype = new " + orm.name + "Base();\n";
    content += orm.name + ".prototype.constructor = " + orm.name + ";\n";

    // exports
    content += "if (exports) exports." + orm.name + " = " + orm.name + ";";

    this.writeFile(orm.name + '.js', content, dir, false);
};

Maker.prototype.createModelStoreFile = function createModelStoreFile(orm, dir) {
    var storeName = orm.name + 'Store';
    var content = "/* This file is generated by IFramework - Maker.js for user to rewrite ModelStore file */\n";
    content += "var " + storeName + " = function " + storeName + "() {\n";
    content += "};\n";
    content += "\n";

    // extends
    content += storeName + ".prototype = new " + storeName + "Base();\n";
    content += storeName + ".prototype.constructor = " + storeName + ";\n";

    // exports
    content += "if (exports) exports." + storeName + " = new " + storeName + "();";

    this.writeFile(storeName + '.js', content, dir, false);
};

Maker.prototype.createListFile = function createListFile(orm, dir) {
    var content = "/* This file is generated by IFramework - Maker.js for user to rewrite List file */\n";
    content += "var " + orm.list + " = function " + orm.list + "(pk, list) {\n";
    content += "    this.init.call(this, pk, list);\n";
    content += "};\n";
    content += "\n";

    // extends
    content += orm.list + ".prototype = new " + orm.list + "Base();\n";
    content += orm.list + ".prototype.constructor = " + orm.list + ";\n";

    // exports
    content += "if (exports) exports." + orm.list + " = " + orm.list + ";";

    this.writeFile(orm.list + '.js', content, dir, false);
};

Maker.prototype.createListStoreFile = function createListStoreFile(orm, dir) {
    var listStoreName = orm.list + 'Store';
    var content = "/* This file is generated by IFramework - Maker.js for user to rewrite ListStore file */\n";
    content += "var " + listStoreName + " = function " + listStoreName + "() {\n";
    content += "};\n";
    content += "\n";

    // extends
    content += listStoreName + ".prototype = new " + listStoreName + "Base();\n";
    content += listStoreName + ".prototype.constructor = " + listStoreName + ";\n";

    // exports
    content += "if (exports) exports." + listStoreName + " = new " + listStoreName + "();";

    this.writeFile(listStoreName + '.js', content, dir, false);
};

/* File System*/
Maker.prototype.writeFile = function writeFile(name, content, path, overwrite) {
    var fullPath = path + '/' + name;

    if (!overwrite && fs.existsSync(fullPath)) {
        console.log(fullPath, 'exists, skip!');
        return;
    }

    fs.writeFileSync(fullPath, content);
    console.log(fullPath, 'Done!');
};

if (exports) {
    exports.Maker = new Maker();
} else {
    var maker = new Maker();
}
