var ListStore = function ListStore() {};

ListStore.prototype.get = function get(pk, cb) {
    var self = this;
    db.hkeys(this.abb + pk, function(err, data) {
        if (err) return cb(new I.Exception(10107, err));
        // empty list
        if (data.length === 0) {
            var list = new self.list(pk);
            cb(null, list);
            return;
        }

        var modelList = {};
        var retrievedCount = 0;
        // fill elements
        data.forEach(function(v) {
            self.childStore.get(v, function(err, model) {
                modelList[v] = model;
                ++retrievedCount;
                if (data.length === retrievedCount) {
                    var list = new self.list(pk, modelList);
                    cb(null, list);
                }
            });
        });
    });
};

ListStore.prototype.del = function del(list, cb) {
    if (list instanceof this.list === false) return cb(new I.Exception(10108, err));
    var self = this;

    if (list.list.length === 0) {
        cb(null, list);
        return
    }

    var dbMulti = db.multi();
    // del list index
    dbMulti.del(this.abb + list.getPK());
    
    // del hash
    list.getKeys().forEach(function(v) {
        dbMulti.del(self.childStore.abb + v);
    });

    dbMulti.exec(function(err, results) {
        if (err) return cb(new I.Exception(10116, err));
        list.reset();
        cb(null, list);
    });
};

ListStore.prototype.updateList = function updateList(list, cb) {
    var self = this;
    var util = I.Util;
    var dbMulti = db.multi();

    var exec = function exec() {
        dbMulti.exec(function(err, results) {
            if (err) return cb(new I.Exception(10117, err));
            cb(null, list);
        });
    };

    // del
    list.toDelList.forEach(function(child) {
        var pk = child.getPK();
        dbMulti.del(self.childStore.abb + pk);
        dbMulti.hdel(self.abb + list.getPK(), pk);
        list.unset(pk);
    });
    list.toDelList = [];

    // update
    list.toUpdateList.forEach(function(child) {
        var toDB = child.toUpdate();
        self.childStore.updateFilter.forEach(function(v) {
            delete toDB[v];
        });
        if (util.getLength(toDB) === 0) return;
        dbMulti.hmset(self.childStore.abb + child.getPK(), toDB);
    });
    list.toUpdateList = [];

    // add
    var toAddListLength = list.toAddList.length;
    if (toAddListLength === 0) return exec();

    var addedCount = 0;
    list.toAddList.forEach(function(v) {
        self.childStore.add(v, function(err, child) {
            list.set(child);
            ++addedCount;
            dbMulti.hset(self.abb + list.getPK(), child.getPK(), 1);
            if (toAddListLength === addedCount) {
                list.toAddList = [];
                exec();
            }
        });
    });
};

ListStore.prototype.updateListSync = function updateListSync(list, cb) {
    cb = cb || function() {};
    var self = this;
    var util = I.Util;
    var dbMulti = db.multi();

    // del
    list.toDelSyncList.forEach(function(child) {
        var pk = child.getPK();
        dbMulti.del(self.childModel.abb + pk);
        dbMulti.hdel(self.abb + list.getPK(), pk);
    });
    list.toDelSyncList = [];

    // update
    list.toUpdateSyncList.forEach(function(index) {
        var child = list.get(index);
        var toDB = child.toUpdate();
        self.childModel.updateFilter.forEach(function(v) {
            delete toDB[v];
        });
        if (util.getLength(toDB) === 0) return;
        dbMulti.hmset(self.childModel.abb + child.getPK(), toDB);
    });
    list.toUpdateSyncList = [];

    // add
    list.toAddSyncList.forEach(function(index) {
        var child = list.get(index);
        var toDB = child.toAdd();
        dbMulti.hmset(self.abb + index, toDB);
    });
    list.toAddSyncList = [];

    dbMulti.exec(function(err, results) {
        if (err) return cb(new I.Exception(10123, err));
    });
};

if (exports) exports.ListStore = ListStore;
