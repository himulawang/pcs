var List = function() {};

List.prototype.init = function init(pk, list)  {
    if (pk === undefined) throw new I.Exception(10118);
    this.setPK(pk);
    this.reset(list);
};

List.prototype.reset = function reset(list) {
    this.list = list || {};

    this.toAddList = [];
    this.toDelList = [];
    this.toUpdateList = [];

    this.toAddSyncList = []; // store index
    this.toDelSyncList = []; // store object
    this.toUpdateSyncList = []; // store index
};

List.prototype.add = function add(child) {
    this.toAddList.push(child);
};

// input can be index or object
List.prototype.del = function del(input) {
    var index = I.Util.isUInt(input) ? input : input.getPK();
    var child = this.get(index);
    this.toDelList.push(child);
};

List.prototype.update = function update(child) {
    var index = child.getPK();
    // verify child exists
    this.get(index);

    this.toUpdateList.push(child);
};

List.prototype.get = function get(index) {
    var child = this.list[index];
    if (!child) return null;

    return child;
};

List.prototype.set = function set(child) {
    this.list[child.getPK()] = child;
};

List.prototype.unset = function unset(input) {
    var index = I.Util.isUInt(input) ? input : input.getPK();
    delete this.list[index];
};

List.prototype.getKeys = function getKeys() {
    var keys = [];
    for (var i in this.list) {
        keys.push(i);
    }
    return keys;
};

List.prototype.getPK = function getPK() { 
    return this.pk; 
};
List.prototype.setPK = function setPK(pk) { 
    this.pk = pk; 
};

List.prototype.toAbbArray = function toAbbArray() {
    var toAbbArray = {};
    for (var i in this.list) {
        toAbbArray[i] = this.list[i].toAbbArray();
    }
    return toAbbArray;
};

List.prototype.toArray = function toArray() {
    var toArray = {};
    for (var i in this.list) {
        toArray[i] = this.list[i].toArray();
    }
    return toArray;
};

List.prototype.fromAbbArray = function fromAbbArray(dataList) {
    var child;                                                 
    for (var i in dataList) {                                  
        child = new this.childModel();                        
        child.fromAbbArray(dataList[i]);                       
        this.set(child);                                    
    }                                                          
};                                                             
List.prototype.fromArray = function fromArray(dataList) {
    var child;                                                 
    for (var i in dataList) {                                  
        child = new this.childModel();                        
        child.fromArray(dataList[i]);                       
        this.set(child);                                    
    }                                                          
};                                                             

List.prototype.getList = function getList() {
    return this.list;
};

List.prototype.last = function last() {
    return I.Util.last(this.list);
};

/* Sync Model: For high real time app
 * These functions prepared for saving dataPool data to redis interval, like 5 seconds or sth.
 * */
List.prototype.addSync = function addSync(child) {
    // the child of addSync must contain pk
    if (child.getPK() === undefined) throw new I.Exception(10120);
    this.toAddSyncList.push(child.getPK());
    this.set(child);
};
List.prototype.delSync = function delSync(input) {
    var index = I.Util.isUInt(input) ? input : input.getPK();
    var child = this.get(index);

    var pos = this.toAddSyncList.indexOf(index);
    if (pos === -1) { // child in redis, need delete
        var updatePos = this.toUpdateSyncList.indexOf(index);
        if (updatePos) this.toUpdateSyncList.splice(updatePos, 1);
        this.toDelSyncList.push(child);
    } else { // child not in redis, delete direct in memory
        this.toAddSyncList.splice(pos, 1);
    }
    this.unset(index);
};
List.prototype.updateSync = function updateSync(child) {
    var index = child.getPK();
    // verify child exists
    this.get(index);

    var pos = this.toAddSyncList.indexOf(index);
    if (pos === -1) { // child in redis
        this.toUpdateSyncList.push(index);
    }
    // child in toAddSyncList, update in memory directly
    this.set(child);
};

if (exports) exports.List = List;
