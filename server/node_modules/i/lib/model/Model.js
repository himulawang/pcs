var Model = function Model() {};

Model.prototype.init = function init(args) {
    var self = this;
    this.args = [];

    this.resetUpdateList();
    if (Array.isArray(args)) {
        args.forEach(function(val, index) {
            self.args[index] = val;
        });
    } else {
        for (var i = 0; i < this.column.length; ++i) {
            this.args[i] = '';
        }
    }
};

Model.prototype.setPK = function setPK(val) { 
    this[this.pk] = val; 
};
Model.prototype.getPK = function getPK() { 
    return this[this.pk]; 
};

Model.prototype.clone = function clone() { 
    return new this.constructor(this.args); 
};
Model.prototype.resetUpdateList = function resetUpdateList() { 
    this.updateList = new Array(this.column.length); 
};

Model.prototype.toAdd = function toAdd() { 
    var toAdd = [];
    this.args.forEach(function(v, i) {
        toAdd[i] = v.toString();
    });
    return toAdd; 
};
Model.prototype.toUpdate = function toUpdate() {
    var self = this;
    var toDB = {};
    this.updateList.forEach(function(v, i) {
        if (v === 1) toDB[i] = self.args[i].toString();
    });
    return toDB;
};
Model.prototype.toAbbArray = function toAbbArray() {
    var toAbbArray = {};
    for (var column in this.abb) {
        toAbbArray[this.abb[column]] = this[column];
    }
    return toAbbArray;
};
Model.prototype.toArray = function toArray() {
    var toArray = {};
    for (var i in this.column) {
        toArray[this.column[i]] = this[this.column[i]];
    }
    return toArray;
};

Model.prototype.fromAbbArray = function fromAbbArray(data, resetUpdateList) { 
    var full;                                                  
    for (var abb in data) {                                    
        full = this.full[abb];                            
        this[full] = data[abb];                                
    }                                                          
    if (resetUpdateList) {
        this.resetUpdateList();                                    
    }
};                                                             
Model.prototype.fromArray = function fromArray(data, resetUpdateList) { 
    for (var full in data) {                                    
        this[full] = data[full];                                
    }                                                          
    if (resetUpdateList) {
        this.resetUpdateList();                                    
    }
};                                                             

if (exports) exports.Model = Model;
