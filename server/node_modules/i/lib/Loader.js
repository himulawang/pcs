var fs = require('fs');
var path = require('path');

var Loader = function(globalLoad) {
    this.classes = {};
    this.globalLoad = globalLoad || true;
};

Loader.prototype.loadCore = function loadCore() {
    global.I = {
        // common
        ConnectionPool: require('./ConnectionPool.js').ConnectionPool,
        Const: require('./Const.js').Const,
        DataPool: require('./DataPool.js').DataPool,
        Exception: require('./Exception.js').Exception,
        ExceptionCodes: require('./ExceptionCodes.js').ExceptionCodes,
        LogicController: require('./LogicController.js').LogicController,
        Route: require('./Route.js').Route,
        Syn: require('./Syn.js').Syn,
        Util: require('./Util.js').Util,
        // model
        PK: require('./model/PK.js').PK,
        Model: require('./model/Model.js').Model,
        List: require('./model/List.js').List,
        PKStore: require('./model/PKStore.js').PKStore,
        ModelStore: require('./model/ModelStore.js').ModelStore,
        ListStore: require('./model/ListStore.js').ListStore,
    };

    // redis
    global.db = require('redis').createClient();
};

Loader.prototype.loadMemoryModelClasses = function loadMemoryClasses(classes) {
    for (var i in classes) {
        this.loadClass(classes[i], i);
    }
};

Loader.prototype.loadClass = function loadClass(Class, name) {
    if (this.globalLoad) {
        if (global[name]) throw new I.Exception(10003);
        global[name] = Class;
    } else {
        if (this.classes[name]) throw new I.Exception(10003);
        this.classes[name] = Class;
    }
};

Loader.prototype.loadDir = function loadDir(dirname) {
    var self = this;
    var dir = this.dir + dirname;

    files = fs.readdirSync(dir);
    files.forEach(function(filename) {
        var name = path.basename(filename, '.js');
        var Class = require(dir + '/' + filename)[name];
        self.loadClass(Class, name);
    });
};

Loader.prototype.loadEx = function loadEx() {
    var exFullPath = this.dir + '/config/ex.js';
    var ex = require(exFullPath).ex;
    for (var i in ex) {
        I.ExceptionCodes[i] = ex[i];
    }
};

Loader.prototype.load = function load(dir) {
    this.dir = dir;

    this.loadDir('/model');
    this.loadDir('/ctrl');
    this.loadDir('/const');
    this.loadDir('/logic');
    this.loadEx();
};

exports.Loader = new Loader();
