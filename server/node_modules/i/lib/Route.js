var Route = function Route() {};

Route.prototype.process = function(routes, params, cb) {
    var route = routes[params.a];
    if (!route) {
        return cb(new I.Exception(10301));
    }

    // type validate
    var validateResult = this.validate(params.p, route.param);
    if (validateResult !== undefined) {
        return cb(validateResult);
    }

    // add logic
    var lc = new I.LogicController();
    global[route.ctrl + 'Controller'][route.action](lc, params.p);

    // add callback
    lc.cb(cb);

    // run
    lc.next();
};

Route.prototype.validate = function(params, paramConfig) {
    var validateResult;
    for (var name in paramConfig) {
        validateResult = this.validateEach(params[name], paramConfig[name]);
        if (validateResult !== undefined) {
            return validateResult;
        }
    }
};

Route.prototype.validateEach = function(value, type) {
    if (type.length !== 2) throw new I.Exception(10302); // TODO put this to server init

    var iConst = I.Const;
    var util = I.Util;
    var passDataTypeValidation = false;

    switch (type[0]) {
        case iConst.PARAM_TYPE_ALLOW_MISS:
            if (value === undefined) passDataTypeValidation = true;
            break;
        case iConst.PARAM_TYPE_ALLOW_EMPTY:
            if (util.isEmpty(value)) passDataTypeValidation = true;
            break;
        case iConst.PARAM_TYPE_FORBID_EMPTY:
            if (util.isEmpty(value)) return new I.Exception(10303);
            break;
        default:
            return new I.Exception(10304);
    }

    if (passDataTypeValidation) return;
    switch (type[1]) {
        case iConst.PARAM_TYPE_INT:
            if (!util.isInt(value)) return new I.Exception(10305);
            break;
        case iConst.PARAM_TYPE_STRING:
            if (!util.isString(value)) return new I.Exception(10306);
            break;
        case iConst.PARAM_TYPE_ARRAY:
            if (!util.isArray(value)) return new I.Exception(10307);
            break;
        case iConst.PARAM_TYPE_HASH:
            if (!util.isHash(value)) return new I.Exception(10308);
            break;
        default:
            return new I.Exception(10309);
    }
};

exports.Route = new Route();
